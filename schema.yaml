openapi: 3.0.3
info:
  title: M5 Final Project - team 15
  version: 1.0.0
  description: Final backend project
paths:
  /api/comments/{comment_id}/:
    delete:
      operationId: api_comments_destroy
      parameters:
      - in: path
        name: comment_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/followers/:
    get:
      operationId: api_followers_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Followers'
          description: ''
  /api/followers/new_request/{user_id}/:
    post:
      operationId: api_followers_new_request_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BondFollowerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BondFollowerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BondFollowerRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BondFollowerRequest'
          description: ''
  /api/followers/request_res/{request_id}/{res}/:
    patch:
      operationId: api_followers_request_res_partial_update
      parameters:
      - in: path
        name: request_id
        schema:
          type: string
        required: true
      - in: path
        name: res
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBondFriendRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBondFriendRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBondFriendRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BondFriendRequest'
          description: ''
  /api/friends/:
    get:
      operationId: api_friends_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendList'
              examples:
                FriendListRetrieve:
                  value:
                    owner: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    friends:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                  summary: list friends
          description: ''
  /api/friends/new_request/{user_id}/:
    get:
      operationId: api_friends_new_request_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BondFriendRequest'
          description: ''
    post:
      operationId: api_friends_new_request_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BondFriendRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BondFriendRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BondFriendRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BondFriendRequest'
          description: ''
  /api/friends/request_res/{request_id}/{res}/:
    patch:
      operationId: api_friends_request_res_partial_update
      parameters:
      - in: path
        name: request_id
        schema:
          type: string
        required: true
      - in: path
        name: res
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBondFriendRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBondFriendRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBondFriendRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BondFriendRequest'
          description: ''
  /api/login/:
    post:
      operationId: api_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/posts/:
    get:
      operationId: api_posts_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
    post:
      operationId: api_posts_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/posts/{post_id}/:
    get:
      operationId: api_posts_retrieve
      parameters:
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: api_posts_update
      parameters:
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: api_posts_partial_update
      parameters:
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: api_posts_destroy
      parameters:
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/{post_id}/comments/:
    post:
      operationId: api_posts_comments_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostComments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostComments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostComments'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostComments'
          description: ''
  /api/refresh/:
    post:
      operationId: api_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/requests/:
    get:
      operationId: api_requests_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BondFriendRequest'
          description: ''
  /api/timeline/:
    get:
      operationId: api_timeline_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
  /api/users/:
    post:
      operationId: api_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              FriendListRetrieve:
                value:
                  id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  username: 9mm5DLpCOUso2hmclNUlI7n6vxbfIMOEOj5vd_X5u4J5Qmw+xuu1cxSe_NgpYGgbF98KSJKlw9709eiFEINtZ
                  email: user@example.com
                  created_at: '2023-03-12T23:19:12.639Z'
                  updated_at: '2023-03-12T23:19:12.639Z'
                  first_name: string
                  last_name: string
                  friends:
                  - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: string
                    email: user@example.com
                  followers:
                  - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: string
                    email: user@example.com
                  private: true
                summary: list friends
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                FriendListRetrieve:
                  value:
                    id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: 9mm5DLpCOUso2hmclNUlI7n6vxbfIMOEOj5vd_X5u4J5Qmw+xuu1cxSe_NgpYGgbF98KSJKlw9709eiFEINtZ
                    email: user@example.com
                    created_at: '2023-03-12T23:19:12.639Z'
                    updated_at: '2023-03-12T23:19:12.639Z'
                    first_name: string
                    last_name: string
                    friends:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                    followers:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                    private: true
                  summary: list friends
          description: ''
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                FriendListRetrieve:
                  value:
                    id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: 9mm5DLpCOUso2hmclNUlI7n6vxbfIMOEOj5vd_X5u4J5Qmw+xuu1cxSe_NgpYGgbF98KSJKlw9709eiFEINtZ
                    email: user@example.com
                    created_at: '2023-03-12T23:19:12.639Z'
                    updated_at: '2023-03-12T23:19:12.639Z'
                    first_name: string
                    last_name: string
                    friends:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                    followers:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                    private: true
                  summary: list friends
          description: ''
    put:
      operationId: api_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              FriendListRetrieve:
                value:
                  id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  username: 9mm5DLpCOUso2hmclNUlI7n6vxbfIMOEOj5vd_X5u4J5Qmw+xuu1cxSe_NgpYGgbF98KSJKlw9709eiFEINtZ
                  email: user@example.com
                  created_at: '2023-03-12T23:19:12.639Z'
                  updated_at: '2023-03-12T23:19:12.639Z'
                  first_name: string
                  last_name: string
                  friends:
                  - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: string
                    email: user@example.com
                  followers:
                  - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: string
                    email: user@example.com
                  private: true
                summary: list friends
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                FriendListRetrieve:
                  value:
                    id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: 9mm5DLpCOUso2hmclNUlI7n6vxbfIMOEOj5vd_X5u4J5Qmw+xuu1cxSe_NgpYGgbF98KSJKlw9709eiFEINtZ
                    email: user@example.com
                    created_at: '2023-03-12T23:19:12.639Z'
                    updated_at: '2023-03-12T23:19:12.639Z'
                    first_name: string
                    last_name: string
                    friends:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                    followers:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                    private: true
                  summary: list friends
          description: ''
    patch:
      operationId: api_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
            examples:
              FriendListRetrieve:
                value:
                  id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  username: 9mm5DLpCOUso2hmclNUlI7n6vxbfIMOEOj5vd_X5u4J5Qmw+xuu1cxSe_NgpYGgbF98KSJKlw9709eiFEINtZ
                  email: user@example.com
                  created_at: '2023-03-12T23:19:12.639Z'
                  updated_at: '2023-03-12T23:19:12.639Z'
                  first_name: string
                  last_name: string
                  friends:
                  - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: string
                    email: user@example.com
                  followers:
                  - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: string
                    email: user@example.com
                  private: true
                summary: list friends
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                FriendListRetrieve:
                  value:
                    id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    username: 9mm5DLpCOUso2hmclNUlI7n6vxbfIMOEOj5vd_X5u4J5Qmw+xuu1cxSe_NgpYGgbF98KSJKlw9709eiFEINtZ
                    email: user@example.com
                    created_at: '2023-03-12T23:19:12.639Z'
                    updated_at: '2023-03-12T23:19:12.639Z'
                    first_name: string
                    last_name: string
                    friends:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                    followers:
                    - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      username: string
                      email: user@example.com
                    private: true
                  summary: list friends
          description: ''
    delete:
      operationId: api_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    BondFollowerRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/sender_follower'
          readOnly: true
        receiver:
          allOf:
          - $ref: '#/components/schemas/receiver_follower'
          readOnly: true
        request_type:
          allOf:
          - $ref: '#/components/schemas/RequestTypeEnum'
          readOnly: true
        sent_at:
          type: string
          format: date-time
          readOnly: true
        aproved:
          type: boolean
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
      required:
      - aproved
      - id
      - is_active
      - receiver
      - request_type
      - sender
      - sent_at
    BondFriendRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/sender_friend'
          readOnly: true
        receiver:
          allOf:
          - $ref: '#/components/schemas/receiver_friend'
          readOnly: true
        request_type:
          allOf:
          - $ref: '#/components/schemas/RequestTypeEnum'
          readOnly: true
        sent_at:
          type: string
          format: date-time
          readOnly: true
        aproved:
          type: boolean
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
      required:
      - aproved
      - id
      - is_active
      - receiver
      - request_type
      - sender
      - sent_at
    Followers:
      type: object
      properties:
        owner:
          type: string
          format: uuid
        followers:
          allOf:
          - $ref: '#/components/schemas/followers'
          readOnly: true
      required:
      - followers
      - owner
    FriendList:
      type: object
      properties:
        owner:
          type: string
          format: uuid
        friends:
          allOf:
          - $ref: '#/components/schemas/friends'
          readOnly: true
      required:
      - friends
      - owner
    PaginatedPostList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    PatchedBondFriendRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/sender_friend'
          readOnly: true
        receiver:
          allOf:
          - $ref: '#/components/schemas/receiver_friend'
          readOnly: true
        request_type:
          allOf:
          - $ref: '#/components/schemas/RequestTypeEnum'
          readOnly: true
        sent_at:
          type: string
          format: date-time
          readOnly: true
        aproved:
          type: boolean
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
    PatchedPost:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user:
          type: string
          format: uuid
        content:
          type: string
        public:
          type: boolean
        post_comments_user:
          type: array
          items:
            $ref: '#/components/schemas/PostComments'
          readOnly: true
        posted_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 127
        password:
          type: string
          writeOnly: true
          maxLength: 128
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        first_name:
          type: string
          maxLength: 127
        last_name:
          type: string
          maxLength: 127
        friends:
          allOf:
          - $ref: '#/components/schemas/user_friends'
          readOnly: true
        followers:
          allOf:
          - $ref: '#/components/schemas/user_followers'
          readOnly: true
        private:
          type: boolean
    Post:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user:
          type: string
          format: uuid
        content:
          type: string
        public:
          type: boolean
        post_comments_user:
          type: array
          items:
            $ref: '#/components/schemas/PostComments'
          readOnly: true
        posted_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - id
      - post_comments_user
      - posted_at
      - public
    PostComments:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        comment_user:
          type: string
          readOnly: true
        text:
          type: string
        commented_at:
          type: string
          readOnly: true
      required:
      - comment_user
      - commented_at
      - id
      - text
    RequestTypeEnum:
      enum:
      - friend
      - follower
      type: string
      description: |-
        * `friend` - Friend
        * `follower` - Follower
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 127
        password:
          type: string
          writeOnly: true
          maxLength: 128
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        first_name:
          type: string
          maxLength: 127
        last_name:
          type: string
          maxLength: 127
        friends:
          allOf:
          - $ref: '#/components/schemas/user_friends'
          readOnly: true
        followers:
          allOf:
          - $ref: '#/components/schemas/user_followers'
          readOnly: true
        private:
          type: boolean
      required:
      - created_at
      - email
      - first_name
      - followers
      - friends
      - id
      - last_name
      - password
      - updated_at
      - username
    followers:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - id
      - username
    friends:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - id
      - username
    receiver_follower:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - first_name
      - id
    receiver_friend:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - first_name
      - id
    sender_follower:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - first_name
      - id
    sender_friend:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - first_name
      - id
    user_followers:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - id
      - username
    user_friends:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - id
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
